include(Path: globals.build)

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

export(
	out sourcesjar,
){
	$sourcesjar = saker.jar.create(
		Output: saker.rmi-sources.jar,
		Resources: [
			{
				Directory: [
					api/src/,
					main/src/,
				],
				Resources: **/*.java
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.rmi-sources-v{ global(VERSION_saker.rmi) }",
			},
		},
	)
}
exportall(
	out bundlepaths = [
		include(export, Path: api/api.build)[jar][Path],
		include(export, Path: main/main.build)[jar][Path],
		include(export)[sourcesjar][Path],
	]
) {
}
install(){
	nest.local.install(include(exportall)[bundlepaths])
}
test(
	in jdk = saker.java.sdk(),
	in additionaljvmparameters = [],
){
	# TODO remove lib/saker_testutils.jar dependency
	$compile = include(compile, Path: main/main.build, testing: true)
	$testcompile = saker.java.compile(
		SourceDirectories: test/src/,
		ClassPath: [
			$compile[javac],
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		],
		Identifier: tests,
		CompilerOptions: global(COMPILER_OPTIONS),
	)
	
	$test = saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: $compile[javac],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath: [
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		],
		TestClasses: [
			**.*Test
		],
		NonDeterministicTests: **,
		TestInvokerParameters: {
			TimeoutMillis: 120000,
		},
		ProcessJVMParameters: [
			--enable-preview 
			#"-agentlib:jdwp=transport=dt_socket,address=localhost:5432,server=y,suspend=y,quiet=y" 
		] + $additionaljvmparameters,
		WorkingDirectory: test/resources/,
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		JavaSDK: $jdk,
		Verbose: true,
	)
}
testjava8(){
	test(
		jdk: saker.java.sdk(8),
	)
}
testjava9(){
	test(
		jdk: saker.java.sdk(9),
	)
}
testjava10(){
	test(
		jdk: saker.java.sdk(10),
	)
}
testjava11(){
	test(
		jdk: saker.java.sdk(11),
	)
}
testjava12(){
	test(
		jdk: saker.java.sdk(12),
	)
}
testjava13(){
	test(
		jdk: saker.java.sdk(13),
	)
}
testjava14(){
	test(
		jdk: saker.java.sdk(14),
	)
}
testjava15(){
	test(
		jdk: saker.java.sdk(15),
	)
}
testjava16(){
	test(
		jdk: saker.java.sdk(16),
	)
}
testjava17(){
	test(
		jdk: saker.java.sdk(17),
	)
}
testjava18(){
	test(
		jdk: saker.java.sdk(18),
	)
}
testjava19(){
	test(
		jdk: saker.java.sdk(19),
	)
}